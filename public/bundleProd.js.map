{"version":3,"file":"bundleProd.js","mappings":"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","sources":["webpack://barcode-viewer/webpack/bootstrap","webpack://barcode-viewer/webpack/runtime/global","webpack://barcode-viewer/webpack/runtime/publicPath","webpack://barcode-viewer/./js/success-error.js","webpack://barcode-viewer/./mocks/response.js","webpack://barcode-viewer/./js/server-fetchs.js","webpack://barcode-viewer/./utils/show-in-modal.js","webpack://barcode-viewer/./utils/open-new-window.js","webpack://barcode-viewer/./js/create-img-hrefs.js","webpack://barcode-viewer/./js/main.js","webpack://barcode-viewer/./utils/server-api.js","webpack://barcode-viewer/./utils/constants.js","webpack://barcode-viewer/./js/clear-img-hrefs.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","\r\nconst onSuccess = () => {\r\n    console.log('fcking OK!!!');\r\n    alert('fcking OK!!!');\r\n}\r\n\r\nconst onError = () => {\r\n    console.log('Error');\r\n}\r\n\r\nconst onLoadData = () => {\r\n    console.log('загружено!');\r\n    alert('что то сделать с загруженым дерьмом');\r\n}\r\n\r\nexport {onSuccess, onError, onLoadData}\r\n","import shkaf from '../mocks/img/shkaf.jpg';\r\nimport stol from '../mocks/img/stol.jpg';\r\nimport stul from '../mocks/img/stul.jpg';\r\nimport cert from '../mocks/pdf/cert.pdf';\r\nimport protocol from '../mocks/pdf/protocol.pdf';\r\nimport zayavlenie from '../mocks/pdf/zayavlenie.pdf';\r\n\r\nconst arrayFromServer = [shkaf, stol, cert, stul, protocol, zayavlenie];\r\n\r\nconst responseObj = {\r\n    images: arrayFromServer\r\n}\r\n\r\nconst response = JSON.stringify(responseObj);\r\n\r\nexport {response}\r\n","import { serverApi } from \"../utils/server-api\";\r\nimport { response } from '../mocks/response';\r\n\r\nlet dataFromServer = {};\r\ndataFromServer = JSON.parse(response);\r\n\r\nconst getData = (onSucces, onLoadData, onError, codeText) => {\r\n  let headers = new Headers();\r\n\r\n  headers.append('Content-Type', 'application/json');\r\n  headers.append('Accept', 'application/json');\r\n  headers.append('Origin','http://192.168.68.102:5294/api/BarcodeDataItems');\r\n\r\n  fetch(serverApi.GET, \r\n    {\r\n      method: 'GET',\r\n      headers: headers,\r\n      body: codeText,\r\n      mode: 'no-cors',\r\n    },      \r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n    onSucces(data);\r\n    })\r\n    .then(() => {\r\n    onLoadData();\r\n    })\r\n    .catch(() => {\r\n    onError();\r\n    });\r\n};\r\n\r\nconst sendData = (onSucces, onError, data) => {\r\n  fetch(serverApi.POST, \r\n    {\r\n      method: 'POST',\r\n      body: data,\r\n    },      \r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n    onSucces(data);\r\n    })\r\n    .then(() => {\r\n    onLoadData();\r\n    })\r\n    .catch(() => {\r\n    onError();\r\n    });\r\n  };\r\n\r\nexport {getData, sendData, dataFromServer}","\r\nconst imgByCode = document.querySelector('.img-by-code');\r\nconst imgWindow = document.querySelector('.img-window');\r\n\r\n\r\nconst showInModal = (url) => {\r\n    imgWindow.style.visibility = \"visible\";\r\n    imgByCode.src = url;\r\n}\r\n\r\nexport {showInModal}\r\n","\r\nconst openNewWindow = (url) => {\r\n    window.open(url);\r\n};\r\n\r\nexport {openNewWindow}\r\n","import { dataFromServer } from './server-fetchs';\r\nimport { openNewWindow } from '../utils/open-new-window';\r\nimport { showInModal } from '../utils/show-in-modal';\r\nimport { extensions } from '../utils/constants';\r\nimport pdfIcon from '../public/icons/pdf.png';\r\nimport openWindowIcon from '../public/icons/open-new-window.png'\r\n\r\nconst images = dataFromServer.images;\r\n\r\n\r\nconst createImgHref = (element, url) => {\r\n    element.src = url;\r\n    const onImgHrefClick = (evt) => {\r\n        evt.preventDefault();\r\n        showInModal(url);\r\n    }\r\n    element.addEventListener('click', onImgHrefClick);\r\n}\r\n\r\nconst createPdfHref = (element, url) => {\r\n    element.src = pdfIcon;\r\n    const onPdfHrefClick = (evt) => {\r\n        evt.preventDefault();\r\n        openNewWindow(url);\r\n    }\r\n    element.addEventListener('click', onPdfHrefClick);\r\n}\r\n\r\nconst createImgHrefs = () => {\r\n    const imgHrefTemplate = document.querySelector('#img-href-template').content;\r\n    const imgHrefBlock = imgHrefTemplate.querySelector('.img-href-block');\r\n    const imgHrefsContainer = document.querySelector('.img-list-fieldset');\r\n    const imgHrefFragment = document.createDocumentFragment();\r\n\r\n    images.forEach((imgUrl) => {\r\n        const block = imgHrefBlock.cloneNode(true);\r\n        const img = block.querySelector('.img-href');\r\n        const btn = block.querySelector('.open-new-window-btn');\r\n        btn.src = openWindowIcon;\r\n        const ext = imgUrl.slice(-3);\r\n        switch (ext) {\r\n            case extensions.PDF :\r\n                createPdfHref(img, imgUrl);\r\n                break;\r\n            default :\r\n                createImgHref(img, imgUrl);\r\n                break;\r\n        }\r\n        const onNewWindowBtnfClick = (evt) => {\r\n            evt.preventDefault();\r\n            openNewWindow(imgUrl);\r\n        }\r\n        btn.addEventListener('click', onNewWindowBtnfClick);\r\n\r\n        imgHrefFragment.appendChild(block);\r\n    })\r\n    imgHrefsContainer.appendChild(imgHrefFragment);\r\n}\r\n\r\nexport {createImgHrefs}\r\n","import {onSuccess, onError, onLoadData} from './success-error';\r\nimport {getData, sendData} from './server-fetchs';\r\nimport { showInModal } from '../utils/show-in-modal';\r\nimport { openNewWindow } from '../utils/open-new-window';\r\nimport { createImgHrefs } from './create-img-hrefs';\r\nimport { dataFromServer } from './server-fetchs';\r\nimport { clearImgHrefs } from './clear-img-hrefs';\r\nimport { extensions } from '../utils/constants';\r\n\r\n\r\nconst submitBtn = document.querySelector('.code-text-btn');\r\nconst codeTextInput = document.querySelector('.code-text-input');\r\nconst imgWindow = document.querySelector('.img-window');\r\nconst imgListField = document.querySelector('.img-list-fieldset');\r\nconst closeBtn = document.querySelector('.close-btn');\r\n\r\n\r\nconst onSubmitBtnClick = () => {\r\n    const dataToSend = {\r\n        barcode: codeTextInput.value\r\n    }\r\n    getData(onSuccess, onLoadData, onError, JSON.stringify(dataToSend));\r\n    sendData(onSuccess, onError, JSON.stringify(dataToSend));\r\n    imgListField.style.visibility = \"visible\";\r\n    const firstFileExt = dataFromServer.images[0].slice(-3);\r\n    switch (firstFileExt) {\r\n      case extensions.PDF:\r\n         openNewWindow(dataFromServer.images[0]);\r\n         break;\r\n      default:\r\n        showInModal(dataFromServer.images[0]);\r\n        break;\r\n    }\r\n    clearImgHrefs();\r\n    createImgHrefs();\r\n}\r\n\r\nsubmitBtn.addEventListener('click', onSubmitBtnClick);\r\n\r\nconst onCloseBtnClick = () => {\r\n  imgWindow.style.visibility = \"hidden\";\r\n}\r\n\r\ncloseBtn.addEventListener('click', onCloseBtnClick);\r\n","\r\nconst serverPath = 'http://192.168.68.102:5294/api/BarcodeDataItems';\r\n\r\nconst serverApi = {\r\n    GET: serverPath,\r\n    POST: serverPath,\r\n};\r\n\r\nexport {serverApi}","const extensions = {\r\n    JPG: 'jpg',\r\n    PNG: 'png',\r\n    PDF: 'pdf',\r\n}\r\n\r\nexport {extensions}\r\n","\r\nconst clearImgHrefs = () => {\r\n    const allImgHrefBlocks = document.querySelectorAll('.img-href-block');\r\n    const imgListField = document.querySelector('.img-list-fieldset');\r\n    for (let i=0; i<allImgHrefBlocks.length; i++) {\r\n        const block = imgListField.querySelector('.img-href-block');\r\n        imgListField.removeChild(block);\r\n    }\r\n}\r\n\r\nexport {clearImgHrefs}\r\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","onSuccess","console","log","alert","onError","responseObj","images","response","JSON","stringify","dataFromServer","parse","imgByCode","querySelector","imgWindow","showInModal","url","style","visibility","openNewWindow","open","submitBtn","codeTextInput","imgListField","closeBtn","addEventListener","dataToSend","barcode","value","onSucces","onLoadData","codeText","headers","Headers","append","fetch","serverPath","method","body","mode","then","json","data","catch","getData","sendData","slice","allImgHrefBlocks","querySelectorAll","i","block","removeChild","clearImgHrefs","imgHrefBlock","content","imgHrefsContainer","imgHrefFragment","createDocumentFragment","forEach","imgUrl","cloneNode","img","btn","element","evt","preventDefault","createImgHref","appendChild","createImgHrefs"],"sourceRoot":""}